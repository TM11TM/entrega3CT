[
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "crud",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "app.db",
        "description": "app.db",
        "isExtraImport": true,
        "detail": "app.db",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "app.db",
        "description": "app.db",
        "isExtraImport": true,
        "detail": "app.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.db",
        "description": "app.db",
        "isExtraImport": true,
        "detail": "app.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.db",
        "description": "app.db",
        "isExtraImport": true,
        "detail": "app.db",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "get_estudiantes",
        "kind": 2,
        "importPath": "app.crud",
        "description": "app.crud",
        "peekOfCode": "def get_estudiantes(db: Session):\n    return db.query(models.Estudiante).all()\ndef get_estudiante(db: Session, estudiante_id: int):\n    estudiante = db.query(models.Estudiante).filter(models.Estudiante.id == estudiante_id).first()\n    if not estudiante:\n        raise HTTPException(status_code=404, detail=\"Estudiante no encontrado\")\n    return estudiante\ndef create_estudiante(db: Session, estudiante: schemas.EstudianteCreate):\n    # Validación teléfono: 9 dígitos españoles (solo números)\n    if not re.fullmatch(r\"\\d{9}\", estudiante.telefono):",
        "detail": "app.crud",
        "documentation": {}
    },
    {
        "label": "get_estudiante",
        "kind": 2,
        "importPath": "app.crud",
        "description": "app.crud",
        "peekOfCode": "def get_estudiante(db: Session, estudiante_id: int):\n    estudiante = db.query(models.Estudiante).filter(models.Estudiante.id == estudiante_id).first()\n    if not estudiante:\n        raise HTTPException(status_code=404, detail=\"Estudiante no encontrado\")\n    return estudiante\ndef create_estudiante(db: Session, estudiante: schemas.EstudianteCreate):\n    # Validación teléfono: 9 dígitos españoles (solo números)\n    if not re.fullmatch(r\"\\d{9}\", estudiante.telefono):\n        raise HTTPException(status_code=400, detail=\"Teléfono inválido. Debe tener 9 dígitos numéricos\")\n    # Validación email básica con regex",
        "detail": "app.crud",
        "documentation": {}
    },
    {
        "label": "create_estudiante",
        "kind": 2,
        "importPath": "app.crud",
        "description": "app.crud",
        "peekOfCode": "def create_estudiante(db: Session, estudiante: schemas.EstudianteCreate):\n    # Validación teléfono: 9 dígitos españoles (solo números)\n    if not re.fullmatch(r\"\\d{9}\", estudiante.telefono):\n        raise HTTPException(status_code=400, detail=\"Teléfono inválido. Debe tener 9 dígitos numéricos\")\n    # Validación email básica con regex\n    email_regex = r\"[^@]+@[^@]+\\.[^@]+\"\n    if not re.fullmatch(email_regex, estudiante.email):\n        raise HTTPException(status_code=400, detail=\"Email inválido\")\n    # Comprobar si email ya existe\n    existing = db.query(models.Estudiante).filter(models.Estudiante.email == estudiante.email).first()",
        "detail": "app.crud",
        "documentation": {}
    },
    {
        "label": "delete_estudiante",
        "kind": 2,
        "importPath": "app.crud",
        "description": "app.crud",
        "peekOfCode": "def delete_estudiante(db: Session, estudiante_id: int):\n    estudiante = db.query(models.Estudiante).filter(models.Estudiante.id == estudiante_id).first()\n    if not estudiante:\n        raise HTTPException(status_code=404, detail=\"Estudiante no encontrado\")\n    db.delete(estudiante)\n    db.commit()",
        "detail": "app.crud",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "app.db",
        "description": "app.db",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = \"mariadb+pymysql://fastapi_user:clase123@db:3306/bd_clase\"\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\n#Sesión para hacer consultas en FastAPI\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n#Base de los modelos\nBase = declarative_base()",
        "detail": "app.db",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.db",
        "description": "app.db",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_DATABASE_URL)\n#Sesión para hacer consultas en FastAPI\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n#Base de los modelos\nBase = declarative_base()",
        "detail": "app.db",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "app.db",
        "description": "app.db",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n#Base de los modelos\nBase = declarative_base()",
        "detail": "app.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.db",
        "description": "app.db",
        "peekOfCode": "Base = declarative_base()",
        "detail": "app.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n@app.get(\"/estudiante\", response_model=list[schemas.EstudianteResponse])\ndef listar_estudiantes(db: Session = Depends(get_db)):\n    logger.info(\"Listando todos los estudiantes\")\n    estudiantes = crud.get_estudiantes(db)",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "listar_estudiantes",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def listar_estudiantes(db: Session = Depends(get_db)):\n    logger.info(\"Listando todos los estudiantes\")\n    estudiantes = crud.get_estudiantes(db)\n    if estudiantes is None:\n        raise HTTPException(status_code=404, detail=\"No se encontraron estudiantes\")\n    return estudiantes\n@app.get(\"/estudiante/{estudiante_id}\", response_model=schemas.EstudianteResponse)\ndef obtener_estudiante(estudiante_id: int, db: Session = Depends(get_db)):\n    logger.info(f\"Obteniendo estudiante con id {estudiante_id}\")\n    estudiante = crud.get_estudiante(db, estudiante_id)",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "obtener_estudiante",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def obtener_estudiante(estudiante_id: int, db: Session = Depends(get_db)):\n    logger.info(f\"Obteniendo estudiante con id {estudiante_id}\")\n    estudiante = crud.get_estudiante(db, estudiante_id)\n    if estudiante is None:\n        raise HTTPException(status_code=404, detail=\"Estudiante no encontrado\")\n    return estudiante\n@app.post(\"/estudiante\", response_model=schemas.EstudianteResponse, status_code=status.HTTP_201_CREATED)\ndef crear_estudiante(estudiante: schemas.EstudianteCreate, db: Session = Depends(get_db)):\n    logger.info(f\"Creando estudiante: {estudiante}\")\n    # Validaciones manuales (adicionales a las del crud)",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "crear_estudiante",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def crear_estudiante(estudiante: schemas.EstudianteCreate, db: Session = Depends(get_db)):\n    logger.info(f\"Creando estudiante: {estudiante}\")\n    # Validaciones manuales (adicionales a las del crud)\n    if not estudiante.nombre or not estudiante.apellidos or not estudiante.master or not estudiante.telefono or not estudiante.email:\n        raise HTTPException(status_code=400, detail=\"Todos los campos son obligatorios\")\n    return crud.create_estudiante(db, estudiante)\n@app.delete(\"/estudiante/{estudiante_id}\", status_code=status.HTTP_204_NO_CONTENT)\ndef eliminar_estudiante(estudiante_id: int, db: Session = Depends(get_db)):\n    logger.info(f\"Eliminando estudiante con id {estudiante_id}\")\n    estudiante = crud.get_estudiante(db, estudiante_id)",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "eliminar_estudiante",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def eliminar_estudiante(estudiante_id: int, db: Session = Depends(get_db)):\n    logger.info(f\"Eliminando estudiante con id {estudiante_id}\")\n    estudiante = crud.get_estudiante(db, estudiante_id)\n    if estudiante is None:\n        raise HTTPException(status_code=404, detail=\"Estudiante no encontrado\")\n    crud.delete_estudiante(db, estudiante_id)\n    return None",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI()\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n# bbdd error\ntry:\n    with SessionLocal() as db:\n        db.execute(text(\"SELECT 1\"))\n    logger.info(\"Conexión a la base de datos exitosa\")\nexcept OperationalError as e:\n    logger.error(f\"No se pudo conectar a la base de datos: {e}\")",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# bbdd error\ntry:\n    with SessionLocal() as db:\n        db.execute(text(\"SELECT 1\"))\n    logger.info(\"Conexión a la base de datos exitosa\")\nexcept OperationalError as e:\n    logger.error(f\"No se pudo conectar a la base de datos: {e}\")\ndef get_db():\n    db = SessionLocal()",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "Estudiante",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Estudiante(Base):\n    __tablename__ = \"estudiantes\"\n    id = Column(Integer, primary_key=True, index=True)\n    nombre = Column(String(50), nullable=False)\n    apellidos = Column(String(100), nullable=False)\n    master = Column(String(100), nullable=False)\n    telefono = Column(String(9), nullable=False)\n    email = Column(String(100), nullable=False, unique=True)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Estudiante",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class Estudiante(BaseModel):\n    nombre: str = Field( description=\"Nombre del estudiante\")\n    apellidos: str = Field( description=\"Apellidos del estudiante\")\n    master: str = Field( description=\"Nombre del máster que estudia\")\n    telefono: str = Field( description=\"Teléfono español de 9 dígitos\")\n    email:str = Field(description=\"Correo electrónico del estudiante\")\nclass EstudianteCreate(Estudiante):\n    pass\nclass EstudianteResponse(Estudiante):\n    id: int",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "EstudianteCreate",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class EstudianteCreate(Estudiante):\n    pass\nclass EstudianteResponse(Estudiante):\n    id: int\n    class Config:\n        orm_mode = True",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "EstudianteResponse",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class EstudianteResponse(Estudiante):\n    id: int\n    class Config:\n        orm_mode = True",
        "detail": "app.schemas",
        "documentation": {}
    }
]